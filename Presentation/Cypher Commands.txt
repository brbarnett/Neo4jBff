:play movie graph

Review nodes

Review Neo4jBffDB diagram

// Get all People

SELECT * FROM People

MATCH (a:Person) RETURN a

// Get all producers

SELECT DISTINCT
		p.Name
FROM
		People p
			inner join
		ProducersMovies pm
			on
		P.Id = pm.ProducerId
		
MATCH (p:Person) 
WHERE EXISTS((p)-[:PRODUCED]->(:Movie)) 
RETURN p

// Check out Keanu and those he's worked with

SELECT
		*
FROM
		People P
			inner join
		ActorsMovies AM
			on
		P.Id = AM.ActorId
			inner join
		Movies M
			on
		AM.MovieId = M.Id
			inner join
		ActorsMovies AM2
			on
		M.Id = AM2.MovieId
			inner join
		People P2
			on
		AM2.ActorId = P2.Id
			and
		P2.Id <> P.Id
WHERE
		P.Name = 'Keanu Reeves'
		
MATCH (a:Person { name: 'Keanu Reeves' }),	// get Keanu Reeves
	  (a)-[:ACTED_IN]->(m:Movie),	// movies he's acted in
	  (m)<-[:ACTED_IN]-(o:Person)	// co-stars
WHERE a <> o
RETURN a AS Actor, collect(distinct m) AS Movies, collect(distinct o) AS CoActors
LIMIT 1

-- Cool stuff

-- shortest path between Kevin Bacon and Meg Ryan
MATCH p=shortestPath((bacon:Person {name:"Kevin Bacon"})-[*]-(meg:Person {name:"Meg Ryan"})) RETURN p

-- anything within 3 hops from Kevin Bacon
MATCH (bacon:Person {name:"Kevin Bacon"})-[*1..3]-(hollywood) RETURN DISTINCT hollywood

-- EM

-- what skills do I share with people like me?
MATCH (e:Expert { Username: 'bbarnett' })-[:HasSkill]->(mySkill:Skill), 
      (mySkill)<-[:HasSkill]-(:Expert)-[:HasSkill]-(s:Skill) 
RETURN s.Name, count(s)
ORDER BY count(s) DESC

-- who do I share the most skills with?
MATCH (e:Expert { Username: 'bbarnett' })-[:HasSkill]->(mySkill:Skill), 
      (mySkill)<-[:HasSkill]-(o:Expert)
RETURN o.Name, count(o)
ORDER BY count(o) DESC